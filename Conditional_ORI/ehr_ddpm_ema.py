# -*- coding: utf-8 -*-
"""Copy of EHR DDPM EMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SbVmqPvj5lQ2e1q_xrWrVsrmvSxaatSX
"""

'''
This script does conditional image generation on MNIST, using a diffusion model

This code is modified from,
https://github.com/cloneofsimo/minDiffusion

Diffusion model is based on DDPM,
https://arxiv.org/abs/2006.11239

The conditioning idea is taken from 'Classifier-Free Diffusion Guidance',
https://arxiv.org/abs/2207.12598

This technique also features in ImageGen 'Photorealistic Text-to-Image Diffusion Modelswith Deep Language Understanding',
https://arxiv.org/abs/2205.11487

'''
from typing import Dict, Tuple
from tqdm import tqdm
import torch
import seaborn as sns
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
from torchvision import models, transforms
from torchvision.datasets import MNIST
from torchvision.utils import save_image, make_grid
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter
import numpy as np
import torchvision
import random
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from torch.utils.data import Dataset
from sklearn.metrics import f1_score, roc_auc_score, accuracy_score,roc_curve
from umap import UMAP
import plotly.express as px

class ResidualConvBlock(nn.Module):
    def __init__(
        self, in_channels: int, out_channels: int, is_res: bool = False
    ) -> None:
        super().__init__()
        '''
        standard ResNet style convolutional block
        '''
        self.same_channels = in_channels==out_channels
        self.is_res = is_res
        self.conv1 = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, 3, 1, 1),
            nn.BatchNorm2d(out_channels),
            nn.GELU(),
        )
        self.conv2 = nn.Sequential(
            nn.Conv2d(out_channels, out_channels, 3, 1, 1),
            nn.BatchNorm2d(out_channels),
            nn.GELU(),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        if self.is_res:
            x1 = self.conv1(x)
            x2 = self.conv2(x1)
            # this adds on correct residual in case channels have increased
            if self.same_channels:
                out = x + x2
            else:
                out = x1 + x2
            return out
        else:
            x1 = self.conv1(x)
            x2 = self.conv2(x1)
            return x2


class UnetDown(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(UnetDown, self).__init__()
        '''
        process and downscale the image feature maps
        '''
        layers = [nn.Linear(in_channels, out_channels), nn.GELU()]
        self.model = nn.Sequential(*layers)

    def forward(self, x):
        return self.model(x)


class UnetUp(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(UnetUp, self).__init__()
        '''
        process and upscale the image feature maps
        '''
        layers = [nn.Linear(in_channels, out_channels), nn.GELU()]

        self.model = nn.Sequential(*layers)

    def forward(self, x, skip):
        x = torch.cat((x, skip), 1)
        # print(x.shape)
        x = self.model(x)
        return x


class EmbedFC(nn.Module):
    def __init__(self, input_dim, emb_dim):
        super(EmbedFC, self).__init__()
        '''
        generic one layer FC NN for embedding things
        '''
        self.input_dim = input_dim
        layers = [
            nn.Linear(input_dim, emb_dim),
            nn.GELU(),
            nn.Linear(emb_dim, emb_dim),
        ]
        self.model = nn.Sequential(*layers)

    def forward(self, x):
        x = x.view(-1, self.input_dim)
        return self.model(x)


class ContextUnet(nn.Module):
    def __init__(self, in_channels, n_feat = 256, n_classes=10):
        super(ContextUnet, self).__init__()

        self.in_channels = in_channels
        self.n_feat = n_feat
        self.n_classes = n_classes

        self.down1 = UnetDown(n_feat, 2*n_feat)
        self.timeembed1 = EmbedFC(1, 2*n_feat)
        self.contextembed1 = EmbedFC(n_classes, 2*n_feat)

        self.up0 = nn.Linear(2*n_feat, 2*n_feat)
        self.up1 = UnetUp(4 * n_feat, n_feat)


    def forward(self, x, c, t, context_mask):
        down1 = self.down1(x)


        # convert context to one hot embedding
        c = nn.functional.one_hot(c.long(), num_classes=self.n_classes).type(torch.float)

        # mask out context if context_mask == 1
        context_mask = context_mask[:, None]
        context_mask = context_mask.repeat(1,self.n_classes)
        context_mask = (-1*(1-context_mask)) # need to flip 0 <-> 1
        c = c * context_mask

        # embed context, time step
        cemb1 = self.contextembed1(c).view(-1, self.n_feat * 2)
        temb1 = self.timeembed1(t).view(-1, self.n_feat * 2)


        # could concatenate the context embedding here instead of adaGN
        # hiddenvec = torch.cat((hiddenvec, temb1, cemb1), 1)
        up1 = self.up0(down1)

        # print(up1.shape, down1.shape)
        up2 = self.up1(cemb1*up1+ temb1, down1)  # add and multiply embeddings

        return up2

def ddpm_schedules(beta1, beta2, T):
    """
    Returns pre-computed schedules for DDPM sampling, training process.
    """
    assert beta1 < beta2 < 1.0, "beta1 and beta2 must be in (0, 1)"
    beta_t = (beta2 - beta1) * torch.arange(0, T + 1, dtype=torch.float32) / T + beta1
    sqrt_beta_t = torch.sqrt(beta_t)
    alpha_t = 1 - beta_t
    log_alpha_t = torch.log(alpha_t)
    alphabar_t = torch.cumsum(log_alpha_t, dim=0).exp()

    sqrtab = torch.sqrt(alphabar_t)
    oneover_sqrta = 1 / torch.sqrt(alpha_t)

    sqrtmab = torch.sqrt(1 - alphabar_t)
    mab_over_sqrtmab_inv = (1 - alpha_t) / sqrtmab

    return {
        "alpha_t": alpha_t,  # \alpha_t
        "oneover_sqrta": oneover_sqrta,  # 1/\sqrt{\alpha_t}
        "sqrt_beta_t": sqrt_beta_t,  # \sqrt{\beta_t}
        "alphabar_t": alphabar_t,  # \bar{\alpha_t}
        "sqrtab": sqrtab,  # \sqrt{\bar{\alpha_t}}
        "sqrtmab": sqrtmab,  # \sqrt{1-\bar{\alpha_t}}
        "mab_over_sqrtmab": mab_over_sqrtmab_inv,  # (1-\alpha_t)/\sqrt{1-\bar{\alpha_t}}
    }

def cosine_beta_schedule(timesteps, s = 0.008):
    """
    cosine schedule
    as proposed in https://openreview.net/forum?id=-NEXDKk8gZ
    """
    steps = timesteps + 1
    x = torch.linspace(0, timesteps, steps, dtype = torch.float64)
    alphas_cumprod = torch.cos(((x / timesteps) + s) / (1 + s) * math.pi * 0.5) ** 2
    alphas_cumprod = alphas_cumprod / alphas_cumprod[0]
    betas = 1 - (alphas_cumprod[1:] / alphas_cumprod[:-1])
    return torch.clip(betas, 0, 0.999)


class DDPM(nn.Module):
    def __init__(self, nn_model, betas, n_T, device, drop_prob=0.1):
        super(DDPM, self).__init__()
        self.nn_model = nn_model.to(device)

        # register_buffer allows accessing dictionary produced by ddpm_schedules
        # e.g. can access self.sqrtab later
        for k, v in ddpm_schedules(betas[0], betas[1], n_T).items():
            self.register_buffer(k, v)

        self.n_T = n_T
        self.device = device
        self.drop_prob = drop_prob
        self.loss_mse = nn.MSELoss()

    def forward(self, x, c):
        """
        this method is used in training, so samples t and noise randomly
        """

        _ts = torch.randint(1, self.n_T+1, (x.shape[0],)).to(self.device)  # t ~ Uniform(0, n_T)
        noise = torch.randn_like(x)  # eps ~ N(0, 1)
        x_t = (
            self.sqrtab[_ts, None] * x
            + self.sqrtmab[_ts, None] * noise
        )  # This is the x_t, which is sqrt(alphabar) x_0 + sqrt(1-alphabar) * eps
        # We should predict the "error term" from this x_t. Loss is what we return.
        # dropout context with some probability
        context_mask = torch.bernoulli(torch.zeros_like(c)+self.drop_prob).to(self.device)
        # print(noise.shape)
        # return MSE between added noise, and our predicted noise

        return self.loss_mse(noise, self.nn_model(x_t, c, _ts / self.n_T, context_mask))

    def sample(self, n_sample, size, device, label= 2, guide_w = 5.0):
        # we follow the guidance sampling scheme described in 'Classifier-Free Diffusion Guidance'
        # to make the fwd passes efficient, we concat two versions of the dataset,
        # one with context_mask=0 and the other context_mask=1
        # we then mix the outputs with the guidance scale, w
        # where w>0 means more guidance

        x_i = torch.randn(n_sample, *size).to(device)  # x_T ~ N(0, 1), sample initial noise

        c_i = torch.tensor(label).to(device)
        c_i = c_i.repeat(int(n_sample/c_i.shape[0]))

        # don't drop context at test time
        context_mask = torch.zeros_like(c_i).to(device)

        # double the batch
        c_i = c_i.repeat(2)
        context_mask = context_mask.repeat(2)
        context_mask[n_sample:] = 1. # makes second half of batch context free

        x_i_store = [] # keep track of generated steps in case want to plot something
        print()
        for i in range(self.n_T, 0, -1):
            print(f'sampling timestep {i}',end='\r')
            t_is = torch.tensor([i / self.n_T]).to(device)
            t_is = t_is.repeat(n_sample,1)

            # double batch
            x_i = x_i.repeat(2,1)
            t_is = t_is.repeat(2,1)

            z = torch.randn(n_sample, *size).to(device) if i > 1 else 0

            # split predictions and compute weighting
            eps = self.nn_model(x_i, c_i, t_is, context_mask)
            eps1 = eps[:n_sample]
            eps2 = eps[n_sample:]
            eps = (1+guide_w)*eps1 - guide_w*eps2
            x_i = x_i[:n_sample]
            x_i = (
                self.oneover_sqrta[i] * (x_i - eps * self.mab_over_sqrtmab[i])
                + self.sqrt_beta_t[i] * z
            )
            if i%20==0 or i==self.n_T or i<8:
                x_i_store.append(x_i.detach().cpu().numpy())

        x_i_store = np.array(x_i_store)
        return x_i, x_i_store


class MyDataset(Dataset):

    def __init__(self,x, y):
        self.x =torch.tensor(x.values,dtype=torch.float32)
        self.y =torch.tensor(y.values,dtype=torch.float32)

    def __len__(self):
     return len(self.y)

    def __getitem__(self,idx):
        return self.x[idx],self.y[idx]


class LogisticRegression(torch.nn.Module):
     def __init__(self, input_dim, output_dim):
         super(LogisticRegression, self).__init__()
         self.linear = torch.nn.Linear(input_dim, output_dim)
     def forward(self, x):
         outputs = torch.sigmoid(self.linear(x))
         return outputs

data = pd.read_csv('data-ori.csv')
data['SOURCE'] = data.SOURCE.replace({"in":1, 'out':0})


# INPATIENT : 1
# OUTPATIENT : 0

# Split df into X and y
y = data['SOURCE']
x = data.drop('SOURCE', axis=1)
x = x.drop('SEX', axis=1)
feat = x.columns
print(feat)

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.7, shuffle=True, random_state=1)

scaler = StandardScaler()
scaler.fit(x_train)
num_feat = x.columns
x_train[num_feat] = scaler.fit_transform(x_train[num_feat]) #fit and transform the train set
x_test[num_feat] = scaler.transform(x_test[num_feat]) #transform the test test

EHR_train = MyDataset(x_train, y_train)
v, c = EHR_train.y.unique(return_counts=True)
print(v, c)
EHR_test = MyDataset(x_test, y_test)
v, c = EHR_test.y.unique(return_counts=True)
print(v, c)

# We will imbalance the dataset manually with this list.
sample_probs = {'0':0.1, '1':0.9}
idx_to_del = [i for i, label in enumerate(EHR_train.y)  if random.random() > sample_probs[str(int(label.item()))]]
len(idx_to_del)

"""### Build imbalanced (imbalanced in terms of labels) training set

#### Make the test set is still balanced
"""

EHR_train.x = EHR_train.x[idx_to_del]
EHR_train.y = EHR_train.y[idx_to_del]
v, c = EHR_train.y.unique(return_counts=True)
v, c

"""###Train DDPM"""

import torch
from torch import nn
import copy

from copy import deepcopy
from collections import OrderedDict
from sys import stderr

# for type hint
from torch import Tensor

n_epoch = 10000
batch_size = 16
n_T = 200
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
n_classes = 2
n_feat = 9
lrate = 1e-2
save_model = False
save_dir = './data/diffusion_outputs10/'
w = .2

dataloader = torch.utils.data.DataLoader(EHR_train, batch_size=batch_size, drop_last=True, shuffle=True)
ddpm = DDPM(nn_model=ContextUnet(in_channels=1, n_feat=n_feat, n_classes=2), \
            betas=(1e-4, 0.02), n_T=n_T, device=device, drop_prob=0.1)
ddpm.to(device)

ddpm_ema = copy.deepcopy(ddpm)



def ema(source, target, decay):
    source_dict = source.state_dict()
    target_dict = target.state_dict()
    for key in source_dict.keys():
        target_dict[key].data.copy_(
            target_dict[key].data * decay +
            source_dict[key].data * (1 - decay))


optimizer = torch.optim.SGD(ddpm.parameters(), 0.01, 0.7)
pbar = tqdm(dataloader)
loss_ema = True

for e in range(n_epoch):
    for x, c in pbar:
        optimizer.zero_grad()
        x = x.to(device)
        c = c.to(device)
        loss = ddpm(x, c)
        loss.backward()
        if loss_ema is None:
            loss_ema = loss.item()
        else:
            loss_ema = 0.95 * loss_ema + 0.05 * loss.item()
        pbar.set_description(f"loss: {loss_ema:.4f}")
        optimizer.step()
        ema(ddpm, ddpm_ema, 0.9999)
        if e % 100 == 0:
          ckpt_ema = {
            'epoch': e,
            'ddpm_state_dict': ddpm.state_dict(),
            'ema_state_dict': ddpm_ema.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'loss': loss_ema,
          }

v, c = EHR_train.y.unique(return_counts=True)

ddpm.eval()
ddpm_ema.eval()

with torch.no_grad():
    n_sample = np.absolute(c[0]-c[1])
    x_gen, x_gen_store = ddpm_ema.sample(n_sample, (9,), device, label=[1], guide_w=0)

#this graph shows the generated data and the real data for each feature
df = pd.DataFrame(x_gen.cpu().numpy(), columns=feat) #df is the generated data
fig, axes = plt.subplots(9, 1, figsize=(8, 25))
plt.subplots_adjust(hspace=0.5) # Add vertical spacing
x = pd.DataFrame(EHR_test.x.cpu().numpy(), columns=feat) # x is the real data
for i, c in enumerate(num_feat):
    f = df[[c]].plot(kind='kde',color='#2B83BA',ax=axes[i])
    f = x[[c]].plot(kind='kde',color='#D7191C', linestyle='--', ax=axes[i])
    axes[i].legend([f'{c} - Generated', f'{c} - Original'])
    axes[i].set_title(f'Generated and Original Comparision of {c}')
print(fig)
print(axes)
plt.show()

ddpm_ema.eval()

# generating MINORITY class (INPATIENT = CLASS 1) samples
with torch.no_grad():
    n_sample = 10000
    x_gen, x_gen_store = ddpm_ema.sample(n_sample, (9,), device, label=[1], guide_w=0.6)
df1 = pd.DataFrame(x_gen.cpu().numpy(), columns=feat)

# generating majority class (outpatient = CLASS 0) samples
with torch.no_grad():
    n_sample = 10000
    x_gen, x_gen_store = ddpm_ema.sample(n_sample, (9,), device, label=[0], guide_w=0.6)
df0 = pd.DataFrame(x_gen.cpu().numpy(), columns=feat)

fig, axes = plt.subplots(9, 1, figsize=(13, 35))
plt.subplots_adjust(hspace=0.5) # Add vertical spacing
x = pd.DataFrame(EHR_test.x.cpu().numpy(), columns=feat)
x1 = x.iloc[(y_test==1).to_numpy().nonzero()[0],:]
x0 = x.iloc[(y_test==0).to_numpy().nonzero()[0],:]

for i, c in enumerate(num_feat):
    df1[[c]].plot(kind='kde', color='red', linestyle='--', ax=axes[i])
    x1[[c]].plot(kind='kde', color='red', linestyle='-', ax=axes[i])
    df0[[c]].plot(kind='kde', color='blue', linestyle='-.', ax=axes[i])
    x0[[c]].plot(kind='kde', color='blue', linestyle='-', ax=axes[i])
    axes[i].legend([f'{c} - Generated(Inpatient Care)', f'{c} - Original(Inpatient Care)',
                    f'{c} - Generated(Outpatient Care)', f'{c} - Original(Outpatient Care)'])
    axes[i].set_title(f'Generated and Original Comparison of {c} by Class')
plt.show()

print(fig)
print(axes)
